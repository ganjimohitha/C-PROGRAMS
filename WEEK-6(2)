#include<iostream>
using namespace std;
class complex {
private:
    float real;
    float img;
public:
    complex(float r = 0, float i = 0) : real(r), img(i) {}
    void display() {
        cout << real << " + " << img << "i" << endl;
    }
    friend complex operator-(const complex& obj);                 
    friend complex operator++(complex& obj);                      
    friend complex operator+(const complex& a, const complex& b); 
    friend complex operator-(const complex& a, const complex& b); 
};
    complex operator-(const complex& obj) {
        return complex(-obj.real, -obj.img);
    }
    complex operator++(complex& obj) {
        ++obj.real;
    	++obj.img;
    	return obj;
    }
	complex operator+(const complex& a, const complex& b) {
    	return complex(a.real + b.real, a.img + b.img);
	}
	complex operator-(const complex& a, const complex& b) {
    	return complex(a.real - b.real, a.img - b.img);
	}

int main() {
    complex c1(2, 6), c2(3, 1), c3;
    cout << "Original complex numbers: " << endl;
    cout << "c1= "; c1.display();
    cout << "c2= "; c2.display();
    c3 = -c1;
    cout << "\nAfter unary - on c1: " << endl;
    cout << "c3= "; c3.display();
    ++c1;
    cout << "\nAfter unary ++ on c1: " << endl;
    cout << "c1= "; c1.display();
    c3 = c1 + c2;
    cout << "\nAfter c1+c2:" << endl;
    cout << "c3= "; c3.display();
    c3 = c1 - c2;
    cout << "\nAfter c1-c2: " << endl;
    cout << "c3= "; c3.display();
    return 0;
}
